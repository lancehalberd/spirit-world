import { requireFrame } from 'app/utils/packedImages';

const spaceWidth = 4;
const arFont = {
    // This image is generated by calling generateFontImage('Habbo', 16), saving the resulting image and character widths
    // then editing the image to change the font to white pixels with no anti-aliasing.
    fontSource: 'gfx/hud/arFont.png',
    characters: '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ/.*+!?$',
    height: 5,
    widths: [
        // 1-90
        4,4,4,4,4,4,4,4,4,4,
        // A-G
        5,5,4,5,4,4,5,
        // H-P
        4,4,5,5,4,6,5,5,5,
        // Q-Z
        6,5,4,4,5,6,6,5,4,4,
        // '/'.*+!?$
        4, 2, 4, 4, 2, 6, 5
    ],
    frameMap: {} as {[key: string]: Frame},
    scale: 1,
};

let x = 0;
for (let i = 0; i < arFont.characters.length; i++) {
    const w = arFont.widths[i];
    arFont.frameMap[arFont.characters[i]] = requireFrame(arFont.fontSource, {x, y: 0, w, h: arFont.height, s: arFont.scale});
    x += w;
}

interface TextOptions {
    textAlign: 'left' | 'center' | 'right'
    textBaseline: 'top' | 'middle' | 'bottom'
}

export function drawARFont(context: CanvasRenderingContext2D, text: string, x: number, y: number,
    {textAlign = 'left', textBaseline = 'bottom'}: Partial<TextOptions>
) {
    text = `${text}`;
    x = x | 0;
    y = y | 0;

    let textWidth = 0;
    for (let c of text) {
        const frame = arFont.frameMap[c] || arFont.frameMap[c.toUpperCase()];
        if (frame) {
            textWidth += frame.w;
        } else {
            textWidth += spaceWidth;
        }
    }

    if (textBaseline === 'middle') y = Math.round(y - arFont.height / 2);
    else if (textBaseline === 'bottom') y = Math.round(y -  arFont.height);

    if (textAlign === 'center') x = Math.round(x - textWidth / 2);
    else if (textAlign === 'right') x = Math.round(x - textWidth);

    for (const c of text) {
        const frame = arFont.frameMap[c] || arFont.frameMap[c.toUpperCase()];
        if (frame) {
            context.drawImage(frame.image,
                frame.x, frame.y, frame.w, frame.h,
                x, y, frame.w, frame.h,
            );
            x += frame.w;
        } else {
            x += spaceWidth;
        }
    }
    return textWidth;
}
